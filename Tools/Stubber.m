// TODO: rewrite

#import "Utils.h"

int main(int argCount,char** argList)
{
	if(argCount<4)
	{
		trace(@"usage: %s old.dylib new.dylib out.m [shims1.m [shims2.m [...]]]",argList[0]);
		return 1;
	}
	
	NSString* oldPath=[NSString stringWithUTF8String:argList[1]];
	NSString* newPath=[NSString stringWithUTF8String:argList[2]];
	NSString* outPath=[NSString stringWithUTF8String:argList[3]];
	
	NSMutableArray<NSString*>* shimPaths=NSMutableArray.alloc.init;
	for(unsigned int index=4;index<argCount;index++)
	{
		[shimPaths addObject:[NSString stringWithUTF8String:argList[index]]];
	}
	
	NSString* oldSymbolsString;
	NSString* newSymbolsString;
	if(runTask(@[@"/usr/bin/nm",@"-gUj",oldPath],nil,&oldSymbolsString))
	{
		trace(@"nm (old) failed");
		return 1;
	}
	if(runTask(@[@"/usr/bin/nm",@"-gUj",newPath],nil,&newSymbolsString))
	{
		trace(@"nm (new) failed");
		return 1;
	}
	
	NSArray<NSString*>* oldSymbols=[oldSymbolsString componentsSeparatedByString:@"\n"];
	NSArray<NSString*>* newSymbols=[newSymbolsString componentsSeparatedByString:@"\n"];
	
	NSMutableArray<NSString*>* diffSymbols=NSMutableArray.alloc.init;
	for(unsigned int index=0;index<newSymbols.count;index++)
	{
		if([oldSymbols indexOfObject:newSymbols[index]]==NSNotFound)
		{
			NSString* symbolNoUnderscore=[newSymbols[index] substringFromIndex:1];
			[diffSymbols addObject:symbolNoUnderscore];
		}
	}
	
	NSMutableString* output=NSMutableString.alloc.init;
	[output appendString:@"// generated by Stubber\n#import \"Utils.h\"\n#import \"Stub.m\"\n"];
	
	NSMutableString* shims=NSMutableString.alloc.init;
	for(unsigned int index=0;index<shimPaths.count;index++)
	{
		NSString* shimString=[NSString stringWithContentsOfFile:shimPaths[index] encoding:NSUTF8StringEncoding error:nil];
		[shims appendString:shimString];
	}
	
	unsigned int statClasses=0;
	unsigned int statKeys=0;
	unsigned int statFunctions=0;
	unsigned int statRemoved=0;
	unsigned int statIgnored=0;
	for(unsigned int index=0;index<diffSymbols.count;index++)
	{
		NSString* symbol=diffSymbols[index];
		if([symbol containsString:@"OBJC_CLASS_$_"])
		{
			NSString* className=[symbol substringFromIndex:13];
			if([shims containsString:[NSString stringWithFormat:@"@interface %@:",className]])
			{
				statRemoved++;
				continue;
			}
			
			[output appendFormat:@"@interface %@:Stub\n@end\n@implementation %@\n@end\n",className,className];
			statClasses++;
		}
		else if([symbol containsString:@"OBJC_METACLASS_$_"])
		{
			statIgnored++;
		}
		else if([symbol containsString:@"OBJC_IVAR_$_"])
		{
			// TODO: generate these
			statIgnored++;
		}
		else if([NSCharacterSet.lowercaseLetterCharacterSet characterIsMember:[symbol characterAtIndex:0]])
		{
			if([shims containsString:[NSString stringWithFormat:@" %@=",symbol]])
			{
				statRemoved++;
				continue;
			}
			[output appendFormat:@"NSString* %@=@\"%@\";\n",symbol,symbol];
			statKeys++;
		}
		else
		{
			if([shims containsString:[NSString stringWithFormat:@" %@(",symbol]])
			{
				statRemoved++;
				continue;
			}
			[output appendFormat:@"unsigned long %@()\n{\n\treturn 0;\n}\n",symbol];
			statFunctions++;
		}
	}
	
	// TODO: a bit of a hack
	if(shimPaths.count>0)
	{
		NSString* shimMainPath=[shimPaths[0].stringByDeletingLastPathComponent stringByAppendingPathComponent:@"Main.m"];
		trace(@"importing %@",shimMainPath);
		[output appendFormat:@"#import \"%@\"\n",shimMainPath];
	}
	
	unsigned int statStubs=statClasses+statKeys+statFunctions;
	trace(@"generated %d stubs (%d missing - %d shims - %d ignored = %d classes + %d keys + %d functions)",statStubs,diffSymbols.count,statRemoved,statIgnored,statClasses,statKeys,statFunctions);
	
	NSError* saveError=nil;
	[output writeToFile:outPath atomically:false encoding:NSUTF8StringEncoding error:&saveError];
	trace(@"%@ to %@",saveError?@"error writing":@"wrote",outPath);
	
	return saveError?1:0;
}